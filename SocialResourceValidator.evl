context Post {
	
	constraint DuplicateCategory{
	
		check : self.categories.forAll(c1, c1 | c1 <> c2 implies c1.type <> c2.type)
		
		message : 'Duplicate category found.'
	
		fix {
		
			title : 'Eliminate duplicate.'
			
			do {
			
				delete (self);
			}
		}
	}
	
	constraint UniqueAuthor {
		
		check : count(self.author) == 1
		
		message : 'Author must be unique'
	}
}

context Hashtag {

	constraint BeginWithHash {
		
		guard : self.name.isDefined()
		
		check : forAll(h | h.StartsWith('#'))
		
		message : 'Hashtag must begin with # symbol'
		
		fix {
			
			title : 'Adding # symbol'
			
			do {
				
				self.name = '#'.concat(self.name);
			}
		}
	}
}

context Mention {

	constraint BeginWithAt {
		
		guard : self.name.isDefined()
		
		check : forAll(h | h.StartsWith('@'))
		
		message : 'Mention must begin with @ symbol'
		
		fix {
			
			title : 'Adding @ symbol'
			
			do {
				
				self.name = '@'.concat(self.name);
			}
		}
	}
}