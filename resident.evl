context District {

	constraint MaxStatistics {
	
		guard : self.data.getAllOfType('NumPostDistr').isDefined()
	
		check : count(self.data.getAllOfType('NumPostDistr')) < 2
	
		message : 'Too many statistics of type NumPostDistr.'
	
	}
	
	constraint NoOverlaps {
	
		check : forAll(d1, d2 | d1 <> d2 implies not (d1.coordBx < d2.coordBx and d1.coordEx > d2.coordBx
				and d1.coordBy < d2.coordBy and d1.coordEy > d2.coordBy) and 
				not (d1.coordBx < d2.coordEx and d1.coordEx > d2.coordEx
				and d1.coordBy < d2.coordEy and d1.coordEy > d2.coordEy))
				
		message : 'There are overlapping districts.'
	
	}
	
	constraint UniqueDistrictName {
	
		guard : self.name.isDefined()
	
		check : forAll(d1, d2 | d1 <> d2 implies d1.name <> d2.name)
	
		message : 'The name '+ self.name +' is already taken.'
		
	}
}

context MonitoredCity {

	constraint UniquePlaceName {
	
		guard : self.name.isDefined()
	
		check : forAll(p1, p2 | p1 <> p2 implies p1.name <> p2.name)
	
		message : 'The name '+ self.name +' is already taken.'
		
	}

}

context Place {
	
	constraint DuplicateCategory{
	
		check : self.categories.forAll(c1, c1 | c1 <> c2 implies c1.type <> c2.type)
		
		message : 'Duplicate category found.'
	
		fix {
		
			title : 'Eliminate duplicate.'
			
			do {
			
				delete (self);
			
			}
		
		}
	}

}

context Folder {

  critique NameStartsWithCapital {

      guard : self.satisfies('HasName')

      check : self.name.firstToUpperCase() = self.name

      message : 'Folder ' + self.name +
          ' should start with an upper-case letter'

      fix {

          title : 'Rename to ' + self.name.firstToUpperCase()

          do {
              self.name := self.name.firstToUpperCase();
          }
      }

  }

}

context Sync {

  constraint MustLinkSame {

      check : self.source.eClass() = self.target.eClass()

      message : 'Cannot synchronize a ' + self.source.eClass().name
          + ' with a ' + self.target.eClass().name

      fix {

          title : 'Synchronize with another ' +
              self.source.eClass().name

          do {

              var target := UserInput.choose('Select target',
                  _Model.getAllOfType(self.source.eClass().name));

              if (target.isDefined()) self.target := target;

          }

      }

  }

}